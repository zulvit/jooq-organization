/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.OverheadRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Overhead extends TableImpl<OverheadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.overhead</code>
     */
    public static final Overhead OVERHEAD = new Overhead();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OverheadRecord> getRecordType() {
        return OverheadRecord.class;
    }

    /**
     * The column <code>public.overhead.ID</code>.
     */
    public final TableField<OverheadRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"overhead_ID_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.overhead.date</code>.
     */
    public final TableField<OverheadRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.overhead.organization_id</code>.
     */
    public final TableField<OverheadRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Overhead(Name alias, Table<OverheadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Overhead(Name alias, Table<OverheadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.overhead</code> table reference
     */
    public Overhead(String alias) {
        this(DSL.name(alias), OVERHEAD);
    }

    /**
     * Create an aliased <code>public.overhead</code> table reference
     */
    public Overhead(Name alias) {
        this(alias, OVERHEAD);
    }

    /**
     * Create a <code>public.overhead</code> table reference
     */
    public Overhead() {
        this(DSL.name("overhead"), null);
    }

    public <O extends Record> Overhead(Table<O> child, ForeignKey<O, OverheadRecord> key) {
        super(child, key, OVERHEAD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OverheadRecord> getPrimaryKey() {
        return Keys.OVERHEAD_PK;
    }

    @Override
    public List<ForeignKey<OverheadRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OVERHEAD__OVERHEAD_FK0);
    }

    private transient Organizations _organizations;

    /**
     * Get the implicit join path to the <code>public.organizations</code>
     * table.
     */
    public Organizations organizations() {
        if (_organizations == null)
            _organizations = new Organizations(this, Keys.OVERHEAD__OVERHEAD_FK0);

        return _organizations;
    }

    @Override
    public Overhead as(String alias) {
        return new Overhead(DSL.name(alias), this);
    }

    @Override
    public Overhead as(Name alias) {
        return new Overhead(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Overhead rename(String name) {
        return new Overhead(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Overhead rename(Name name) {
        return new Overhead(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
